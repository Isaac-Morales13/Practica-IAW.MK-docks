{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"Acerca de","text":"<p>ds ds</p>"},{"location":"practica1_1/","title":"Pr\u00e1ctica-IAW.1.1","text":"<p>En esta practica vamos a crear una pila LAMP y todas las herramientas adicionales en una instancia EC2 en Amazon Web Services (AWS) con la \u00faltima versi\u00f3n de Ubuntu Server.</p> <p>[!IMPORTANT] Antes de empezar a configurar los archivos vamos a crear la siguiente estructura de archivos y directorios(el directorio imagenes no es necesario)</p> <p></p>"},{"location":"practica1_1/#configuracion-del-archivo-install_lampsh","title":"Configuraci\u00f3n del archivo <code>install_lamp.sh</code>","text":"<p>Vamos a empezar configurando el archivo <code>install_lamp</code>(script que normalmente se utiliza para automatizar la instalaci\u00f3n y configuraci\u00f3n de un servidor ). </p>"},{"location":"practica1_1/#11-primeros-pasos","title":"1.1 Primeros pasos","text":"<p>Lo primero que tenemos que hacer es poner lo siguiente:</p> <pre><code>#!/bin/bash\n\nset -ex\n\napt update\n\napt upgrade -y\n</code></pre> <p><code>#!/bin/bash:</code> Indica al sistema que int\u00e9rprete debe usar para ejecutar el script</p> <p><code>set -ex:</code> El script se detendra en caso de error y adem\u00e1s muestra comando antes de que sea ejecutado,</p> <p><code>apt update y upgrade:</code> Actualizaci\u00f3n de repositorios y paquetes. <code>-y</code> se usa para aceptar automaticamente las preguntas que nos pueden hacer en la actualizaci\u00f3n, lo que automatiza el proceso</p>"},{"location":"practica1_1/#12-instalacion-de-apache","title":"1.2 Instalaci\u00f3n de Apache","text":"<p>Ahora vamos a instalar Apache,un servidor web que nos permite alojar sitios aplicaciones en la web</p> <pre><code>apt install apache2 -y\n</code></pre> <p>Habilitamos el m\u00f3dulo rewrite, que permite reescribir las URLs y configurar reglas de redireccionamiento, para hacerlas  m\u00e1s amigables y mejorar el SEO de los sitios web.</p> <pre><code>a2enmod rewrite\n</code></pre> <p>[!IMPORTANT] Antes de seguir tenemos que tener configurado el archivo <code>000-default.conf</code> de esta forma: </p> <p><code>DirectoryIndex:</code> Configura el orden prioridad de los archivos que se van a mostrar cuando se accede a un directorio</p> <p><code>ErrorLog:</code> Establece la ubicaci\u00f3n del archivo de registro donde se almacenar\u00e1n los mensajes de error generados por el servidor.</p> <p><code>Custom Log:</code> Define el archivo de registro de acceso donde se guardar\u00e1n las solicitudes HTTP que recibe el servidor</p> <p>Copiamos el archivo de configuraci\u00f3n de Apache en la ruta <code>/etc/apache2/sites-available</code></p> <pre><code>cp ../conf/000-default.conf /etc/apache2/sites-available\n</code></pre> <p>Instalamos PHP y algunos m\u00f3dulo para Apache y MySQL</p> <pre><code>apt install php libapache2-mod-php php-mysql -y\n</code></pre> <p>Creamos los directorios para alojar cada uno de los sitios web</p> <pre><code> mkdir -p /var/www/html/web1\n mkdir -p /var/www/html/web2\n</code></pre> <p>Creamos los archivos de configuraci\u00f3n para cada uno de los sitios web. Empezamos por el sitio web 1.</p> <pre><code> nano /etc/apache2/sites-available/web1.conf\n</code></pre> <p>Una vez dentro a\u00f1adimos esto</p> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerAdmin webmaster@web1.com\n    ServerName web1.com\n    DocumentRoot /var/www/html/web1\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> <p>Hacemos los mismos pasos para la web 2 pero a\u00f1adimos esto</p> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerAdmin webmaster@web2.com\n    ServerName web2.com\n    DocumentRoot /var/www/html/web2\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> <p>Deshabilitamos el sitio virtual que viene por defecto </p> <pre><code>sudo a2dissite 000-default.conf \n</code></pre> <p>Y habilitamos los nuevos que hemos creado</p> <pre><code>sudo a2ensite web1.conf\nsudo a2ensite web2.conf\n</code></pre> <p>Para que se aplique la nueva configuraci\u00f3n es necesario ejecutar el comando</p> <pre><code>sudo systemctl reload apache2\n</code></pre> <p>Editamos el archivo /etc/hosts de nuestro equipo para resolver los nombres de dominio de forma local en nuestro entorno de desarrollo.</p> <pre><code>34.206.30.8   web1.com    \n34.206.30.8  web2.com\n</code></pre> <p>[!IMPORTANT] Antes de seguir tenemos que tener configurado el archivo index.php de esta forma:</p> <p></p> <p>Copiamos el script de prueba de PHP en /var/www/html</p> <pre><code>cp ../php/index.php /var/www/html\n</code></pre> <p>Modificamos el propietario y el grupo del archivo <code>index.php</code></p> <pre><code> chown -R www-data:www-data /var/www/htm\n</code></pre> <p><code>-R:</code>Recursivo.Indica que el cambio de propietario debe aplicarse no solo al directorio especificado, sino tambi\u00e9n a todos los archivos y subdirectorios dentro de \u00e9l</p> <p>Hechas estas configuraciones si ponemos nuestra ip en algun navegador nos deberia salir esto </p>"},{"location":"practica1_1/#13-instalacion-de-mysql-server","title":"1.3 Instalaci\u00f3n de MySQL Server","text":"<p>Ahora vamos a instalar el sistema gestor de bases de datos MySQL</p> <pre><code>apt install mysql-server -y\n</code></pre> <p>Una vez instalado podemos acceder a el mediante terminal</p> <p></p> <p>Despues de estas configuraciones y a\u00f1adir algunos de los comandos al script, deberia quedar asi:</p> <pre><code>#!/bin/bash\n\n# Configuramos para mostrar los comandos y finalizar si hay error\nset -ex\n\n# Actualizamos los repositorios\napt update\n\n# Actualiza los paquetes\napt upgrade -y\n\n# Instalamos el servidor web Apache\napt install apache2 -y\n\n# Habilitamos el modulo rewrite\na2enmod rewrite\n\n# Copiamos el archivo de configuraci\u00f3n de Apache\ncp ../conf/000-default.conf /etc/apache2/sites-available\n\n# Instalamos PHP y algunos m\u00f3dulos de php para Apache y MySQL\napt install php libapache2-mod-php php-mysql -y\n\n# Reiniciamos el servicio de Apache\nsystemctl restart apache2\n\n# Instalamos MYSQL Server\n apt install mysql-server -y\n\n# Copiamos el script de prueba de PHP en /var/www/html\ncp ../php/index.php /var/www/html\n\n# Modificamos el propietario y el grupo del archivo index.php\nchown -R www-data:www-data /var/www/html\n</code></pre>"},{"location":"practica1_1/#configuracion-del-archivo-install_toolssh","title":"Configuraci\u00f3n del archivo <code>install_tools.sh</code>","text":"<p>Ahora vamos a configurar el archivo install_tools, que incluye herramientas necesarias para la instalaci\u00f3n de la pila LAMP</p>"},{"location":"practica1_1/#21-primeros-pasos","title":"2.1 Primeros pasos","text":"<p>Al igual que en el otro script, aqu\u00ed tambien tendremos que poner lo siguiente:</p> <pre><code>#!/bin/bash\n\nset -ex\n\napt update\n\napt upgrade -y\n</code></pre> <p>Hecho esto vamos a importar el archivo de variables para tener acceso a estas variables</p> <pre><code> source .env\n</code></pre> <p>[!IMPORTANT] Estas variables no las tenemos en este script porque estan almacenadas en el archivo .gitignore, cuya funci\u00f3n es especificar qu\u00e9 archivos o directorios deben ser ignorados por Git. El archivo .env que es el que almacena las contrase\u00f1as esta almacenado ah\u00ed  para proteger la intengridad de estos datos importantes</p> <p></p> <p>El archivo env deberia contener algo parecido a esto pero con los valores de las variables(en la captura se han eliminado para proteger estos datos)</p> <p></p> <p>[!TIP] Para poder saber las variables que se configura se hace un archivo llamado <code>env.example</code> en que ponemos las variables sin sus valores(este archivo si se guarda en git) </p>"},{"location":"practica1_1/#22-instalacion-de-phpmyadmin","title":"2.2 Instalaci\u00f3n de phpMyAdmin","text":"<p>Automatizamos las respuestas de phpmyadmin cuando se est\u00e1 actualizando, evitando tener que a\u00f1adirlo manualmente</p> <pre><code>echo \"phpmyadmin phpmyadmin/reconfigure-webserver multiselect apache2\" | debconf-set-selections\necho \"phpmyadmin phpmyadmin/dbconfig-install boolean true\" | debconf-set-selections\necho \"phpmyadmin phpmyadmin/mysql/app-pass password $PHPMYADMIN_APP_PASSWORD\" | debconf-set-selections\necho \"phpmyadmin phpmyadmin/app-password-confirm password $PHPMYADMIN_APP_PASSWORD\" | debconf-set-selections\n</code></pre> <p>Configuradas las respuestas pasamos a instalar phpMyAdmin</p> <pre><code>apt install phpmyadmin php-mbstring php-zip php-gd php-json php-curl -y\n</code></pre>"},{"location":"practica1_1/#23-instalacion-de-adminer","title":"2.3 Instalaci\u00f3n de Adminer","text":"<p>Ahora pasamos a instalar Adminer,una herramienta de gesti\u00f3n de bases de datos basada en web que permite a los usuarios administrar y manipular bases de datos de forma sencilla y eficiente</p> <p>Creamos un directorio para Adminer</p> <pre><code>mkdir -p /var/www/html/adminer\n</code></pre> <p><code>-p:</code>Indica la ruta donde queremos guardar el archivo</p> <p>Descargamos Adminer</p> <pre><code>wget https://github.com/vrana/adminer/releases/download/v4.8.1/adminer-4.8.1-mysql.php -P /var/www/html/adminer\n</code></pre> <p>Renombramos el nombre del script de Adminer a uno m\u00e1s sencillo</p> <pre><code>mv /var/www/html/adminer/adminer-4.8.1-mysql.php /var/www/html/adminer/index.php\n</code></pre> <p>Modificamos el propietario y el grupo del archivo</p> <pre><code>chown -R www-data:www-data /var/www/html/adminer\n</code></pre> <p>Hecho esto deberia ir si ponemos nuestra ip/adminer en un buscador </p>"},{"location":"practica1_1/#24-complementos-mysql","title":"2.4 Complementos mySQL","text":"<p>Vamos a crear una base de datos de ejemplo</p> <pre><code>mysql -u root &lt;&lt;&lt; \"DROP DATABASE IF EXISTS $DB_NAME\"\nmysql -u root &lt;&lt;&lt; \"CREATE DATABASE $DB_NAME\"\n</code></pre> <p>Y un usuario para esta base de datos</p> <pre><code>mysql -u root &lt;&lt;&lt; \"DROP USER IF EXISTS '$DB_USER'@'%'\"\nmysql -u root &lt;&lt;&lt; \"CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASSWORD'\"\nmysql -u root &lt;&lt;&lt; \"GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%'\"\n</code></pre> <p>Ahora si nos vamos a nuestra IP/phpmyadmin nos deberia salir algo parecido a esto: </p>"},{"location":"practica1_1/#25-instalacion-de-goacces","title":"2.5 Instalaci\u00f3n de GoAcces","text":"<p>GoAccess es una herramienta de an\u00e1lisis de logs en tiempo real y de visualizaci\u00f3n de datos</p> <p>Primero lo instalamos</p> <pre><code>apt install goaccess -y\n</code></pre> <p>Luego creamos un directorio para los informes estadisticos</p> <pre><code>mkdir -p /var/www/html/stats\n</code></pre> <p>Finalmente ejecutamos GoAcces en background</p> <pre><code>goaccess /var/log/apache2/access.log -o /var/www/html/stats/index.html --log-format=COMBINED --real-time-html --daemonize\n</code></pre> <p><code>real-time-html:</code> Genera un informe que se actualiza en tiempo real</p> <p><code>daemonize:</code> Hace que se ejecute como un proceso en segundo plano</p>"},{"location":"practica1_1/#26-control-de-acceso-a-un-directorio-con-autentificacion-basica","title":"2.6 Control de acceso a un directorio con autentificaci\u00f3n b\u00e1sica","text":"<p>[!IMPORTANT] Antes de seguir tenemos que tener configurado el archivo <code>000-default.stats.conf de esta manera</code>: </p> <p>Copiamos el archivo default stats a /etc/apache2/sites-available</p> <pre><code>cp ../conf/000-default-stats.conf /etc/apache2/sites-available\n</code></pre> <p>Deshabilitamos el virtualhost que hay por defecto</p> <pre><code>a2dissite 000-default.conf\n</code></pre> <p>Habilitamos el nuevo Virtualhost</p> <pre><code>a2ensite 000-default-stats.conf\n</code></pre> <p>Hacemos un reload a apache</p> <pre><code>systemctl reload apache2\n</code></pre> <p>Creamos el archivo de contrase\u00f1as</p> <pre><code>htpasswd -bc /etc/apache2/.htpasswd $STATS_USERNAME $STATS_PASSWORD\n</code></pre> <p><code>-bc:</code> Para poder incluir este comando en un script de bash,de este modo podemos indicarle el nombre del usuario y la contrase\u00f1a como par\u00e1metros</p>"},{"location":"practica1_1/#27-control-de-acceso-a-un-directorio-con-htaccess","title":"2.7 Control de acceso a un directorio con htaccess","text":"<p>Htaccess permite realizar ajustes en la configuraci\u00f3n del servidor sin necesidad de modificar el archivo de configuraci\u00f3n principal de Apache</p> <p>[!IMPORTANT] Antes de seguir tenemos que tener configurado el archivo <code>000-default-htaccess.conf</code>asi:</p> <p></p> <p>Copiamos el archivo default-stats  ```bash cp ../conf/000-default-htaccess.conf /etc/apache2/sites-available</p> <pre><code>\nDeshabilitamos el virtualhost 000-default-stats.conf\n ```bash\na2dissite 000-default-stats.conf\n</code></pre> <p>Habilitamos el nuevo virtualhost 000-default-htaccess.conf  ```bash a2ensite 000-default-htaccess.conf</p> <pre><code>Hacemos un reload a apache\n ```bash\nsystemctl reload apache2\n</code></pre> <p>[!IMPORTANT] Antes de seguir tenemos que tener configurado el archivo <code>.htaccess</code> as:</p> <p></p> <p>Copiamos el archivo .htaccess a /var/www/html/stats para que al entrar a la web nos pida las credenciales   ```bash cp ../conf/.htaccess /var/www/html/stats</p> <pre><code>\nAhora si nos vamos a nuestra IP/stats nos pedir\u00e1 que iniciemos sesi\u00f3n con nuestra credenciales\n![](../imagenes/inicio_sesion.png)\n\nUna vez introducidas las credenciales tendremos acceso al panel de control\n![](../imagenes/panel_control.png)\n\nYa tendriamos completo el script que quedaria tal que asi:\n ```bash\n#!/bin/bash\n\n# Importamos el archivo de variables\nsource .env\n\n# Configuramos para mostrar los comandos y finalizar si hay error\nset -ex\n\n# Actualizamos los repositorios\napt update\n\n# Actualiza los paquetes\napt upgrade -y\n\n# Configuramos las respuestas para la instalaci\u00f3n de phpMyAdmin\necho \"phpmyadmin phpmyadmin/reconfigure-webserver multiselect apache2\" | debconf-set-selections\necho \"phpmyadmin phpmyadmin/dbconfig-install boolean true\" | debconf-set-selections\necho \"phpmyadmin phpmyadmin/mysql/app-pass password $PHPMYADMIN_APP_PASSWORD\" | debconf-set-selections\necho \"phpmyadmin phpmyadmin/app-password-confirm password $PHPMYADMIN_APP_PASSWORD\" | debconf-set-selections\n\n# Instalamos phpMyAdmin\napt install phpmyadmin php-mbstring php-zip php-gd php-json php-curl -y\n\n#-----------------------------------------------------------------------------------------------------------------------\n# Instalamos Adminer\n\n# Paso 1. Creamos un directorio para Adminer\nmkdir -p /var/www/html/adminer\n\n# Paso 2. Descargamos Adminer\nwget https://github.com/vrana/adminer/releases/download/v4.8.1/adminer-4.8.1-mysql.php -P /var/www/html/adminer\n\n# Paso 3. Renombramos el nombre del script de Adminer\nmv /var/www/html/adminer/adminer-4.8.1-mysql.php /var/www/html/adminer/index.php\n\n# Paso 4. Modificamos el propietario y el grupo del archivo \nchown -R www-data:www-data /var/www/html/adminer\n\n#------------------------------------------------------------------------------------------------------------------------------\n# Creamos una base de datos de ejemplo\nmysql -u root &lt;&lt;&lt; \"DROP DATABASE IF EXISTS $DB_NAME\"\nmysql -u root &lt;&lt;&lt; \"CREATE DATABASE $DB_NAME\"\n\n# Creamos un usuario para la base de datos de ejemplo\nmysql -u root &lt;&lt;&lt; \"DROP USER IF EXISTS '$DB_USER'@'%'\"\nmysql -u root &lt;&lt;&lt; \"CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASSWORD'\"\nmysql -u root &lt;&lt;&lt; \"GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%'\"\n\n#--------------------------------------------------------------------------------------------------------------------------------\n#Instalaci\u00f3n GoAcces\napt install goaccess -y\n\n# Creamos un directorio para los informes estadisticos\nmkdir -p /var/www/html/stats\n\n# Ejecutamos Goaccess en background\ngoaccess /var/log/apache2/access.log -o /var/www/html/stats/index.html --log-format=COMBINED --real-time-html --daemonize\n\n#------------------------------------------------------------------------------------------------------------------------------\n#Control de acceso a un directorio con autentificaci\u00f3n b\u00e1sica\n# Copiamos el archivo default stats\n\ncp ../conf/000-default-stats.conf /etc/apache2/sites-available\n\n# Deshabilitamos el virtualhost que hay por defecto\na2dissite 000-default.conf\n\n# Habilitamos el nuevo Virtualhost\na2ensite 000-default-stats.conf\n\n#Hacemos la configuraci\u00f3n de apache\nsystemctl reload apache2\n\n# Creamos el archivo de contrase\u00f1as\nhtpasswd -bc /etc/apache2/.htpasswd $STATS_USERNAME $STATS_PASSWORD\n\n#------------------------------------------------------------------------------------------------------------------------------\n#Control de acceso a un directorio con .htaccess\n# Copiamos el archivo default-stats\ncp ../conf/000-default-htaccess.conf /etc/apache2/sites-available\n\n# Deshabilitamos el virtualhost 000-default-stats.conf\na2dissite 000-default-stats.conf\n\n# Habilitamos el nuevo virtualhost 000-default-htaccess.conf\na2ensite 000-default-htaccess.conf\n\n# Recargamos la configuracion de apache\nsystemctl reload apache2\n\n# Copiamos el archivo .htaccess a /var/www/html/stats\ncp ../conf/.htaccess /var/www/html/stats\n</code></pre>"},{"location":"practica5_2/","title":"Practica-IAW.5.2","text":""},{"location":"practica5_2/#despliegue-de-wordpress-con-docker-y-docker-compose","title":"Despliegue de WordPress con Docker y Docker Compose","text":"<p>En esta pr\u00e1ctica tendremos que realizar la implantaci\u00f3n de un sitio WordPress en Amazon Web Services (AWS) haciendo uso de contenedores Docker y la herramienta Docker Compose</p> <p>Comandos usados para levantar y apagar los contenedores:</p> <p><code>sudo docker compose up -d</code> </p> <p><code>sudo docker compose down -v</code></p> <p>El .env lo configuramos de esta manera</p> <pre><code># Credenciales de MySQL\nMYSQL_ROOT_PASSWORD=asir\nMYSQL_DATABASE=wordpress_db\nMYSQL_USER=wordpress_user\nMYSQL_PASSWORD=wordpress_pass\n\n# Configuraci\u00f3n de WordPress\nWORDPRESS_DATABASE_HOST=mysql\nWORDPRESS_DATABASE_USER=wordpress_user\nWORDPRESS_DATABASE_PASSWORD=wordpress_pass\nWORDPRESS_DATABASE_NAME=wordpress_db\nWORDPRESS_BLOG_NAME=\"Practica IAW\"\nWORDPRESS_USERNAME=admin\nWORDPRESS_PASSWORD=wordpress_pass\nWORDPRESS_EMAIL=demo@demo.es\n</code></pre> <p>y el docker-compose de esta</p> <pre><code>version: '3.8'\n\nservices:\n  wordpress:\n    image: bitnami/wordpress:latest\n    container_name: wordpress\n    environment:\n      WORDPRESS_DATABASE_HOST: ${WORDPRESS_DATABASE_HOST}\n      WORDPRESS_DATABASE_USER: ${WORDPRESS_DATABASE_USER}\n      WORDPRESS_DATABASE_PASSWORD: ${WORDPRESS_DATABASE_PASSWORD}\n      WORDPRESS_DATABASE_NAME: ${WORDPRESS_DATABASE_NAME}\n      WORDPRESS_BLOG_NAME: ${WORDPRESS_BLOG_NAME}\n      WORDPRESS_USERNAME: ${WORDPRESS_USERNAME}\n      WORDPRESS_PASSWORD: ${WORDPRESS_PASSWORD}\n      WORDPRESS_EMAIL: ${WORDPRESS_EMAIL}\n    volumes:\n      - wordpress_data:/bitnami/wordpress\n    depends_on:\n      - mysql\n    restart: always\n    networks:\n      - frontend-network\n      - backend-network\n\n  mysql:\n    image: mysql:8.0\n    container_name: mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}\n      MYSQL_DATABASE: ${MYSQL_DATABASE}\n      MYSQL_USER: ${MYSQL_USER}\n      MYSQL_PASSWORD: ${MYSQL_PASSWORD}\n    volumes:\n      - mysql_data:/var/lib/mysql\n    networks:\n      - backend-network\n    restart: always\n\n  phpmyadmin:\n    image: phpmyadmin/phpmyadmin\n    container_name: phpmyadmin\n    ports:\n      - \"8080:80\"\n    environment:\n      PMA_HOST: mysql\n    networks:\n      - frontend-network\n    depends_on:\n      - mysql\n    restart: always\n\n  https-portal:\n    image: steveltn/https-portal:latest\n    container_name: https-portal\n    environment:\n      DOMAINS: \"wordpressdocker.zapto.org -&gt; http://wordpress:8080\"\n      STAGE: \"production\"\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    networks:\n      - frontend-network\n    depends_on:\n      - wordpress\n    restart: always\n\nnetworks:\n  frontend-network:\n  backend-network:\n\nvolumes:\n  mysql_data:\n  wordpress_data:\n</code></pre> <p>Ahora pongo a funcionar los contenedor y podemos acceder a wordpress</p> <p></p> <p></p> <p></p> <p></p>"}]}